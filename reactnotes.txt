# Author: William Z Chadwick
# Date Created: 08/10/2022
# Date Modified: 08/10/2022
# Description: A place for me to keep notes and code that I type out following SoloLearn's React + Redux Course

React was created by Facebook (Now Meta).

DOM = Document Object Model

React uses a virtual DOM (Document Object Model) "to update only the parts of the website that have changed." >> Much faster updates.

"Allows developers to group related code together, ... making building and maintaining large scale applications much less complex."

large community and open source

# code: <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
# code: <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>

^^ these are two script tags that add the React library to the head of our HTML doc. not prefered for large projects?

script to enable JSX:

# code: <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

"This approach of adding React to a website is only suitable for creating small demos."

---

need containter to display something using react:

# code: <div id="container"></div>
Note: ^^ doesn't have to be id'd as "container"

# code:
# <script type="text/babel">
# ReactDOM.render(
#	<h1>Hello, React</h1>
#	document.getElementById('container')
# )
# </script>

# code:
# <div id="root">
# </div>

First two lessons complete.

Third lesson:

using React-DOM in a website beyond a demo.

"Create React App"

# code [to run in command line]:
# npx create-react-app my-app
# cd my-app
# npm start

^installs all relevant dependencies and starts project on "localhost:3000"

default output of our project in the browswer will be a React logo and note.

"Create React App allows us to focus on the code rather than installing and configuring different tools."

# code [cli]:
# npx create-react-app contact
# cd contacts
# npm start

"Let's explore the structure of our project by opening it using a code editor"

> public [dir]
> src [dir]
--package-lock.json
--package.json
--README.md

"The public folder contains files related to how the application will display on the client, the most important of those being index.html, which is the HTML template of our page."

> public [dir]
opened:
--favicon.ico
--index.html
--logo192.png
--logo512.png
--manifest.json
--robots.txt

> src [dir]
opened:
--App.css
--App.js
--App.test.js
--index.css
--index.js
--logo.svg
--serviceWorker.js
--setupTests.js

React uses "Webpack" as a "file loader"

"Webpack creates a "bundle" file containing the content of multiple files that need to be "bundled" together and it is all added together into a single file instead of making the HTML file go and find multiple files, which can slow down load times tremendously, it only has to find one file."

Two critical files:

-index.js
-App.js

about index.js: [intry point into application "In our code, a method called ReactDOM.render() is used to find an element with id="root" in the HTML and add our React application inside of that element (similar to the previous lesson)."]

about App.js: ["This file is the main component that will be rendered to the DOM which currently includes the React ogo image and the default text, that we see in the output."]

so:

index.html belongs in the public folder

whereas:

index.css & index.js belong in the src folder

---

Begin Lesson 4:

creating your own "Contact Manager" app using React

"will allow to view the list of contacts and add new ones to the list"

example on StackBlitz

everything will make complete sense by the time you finish the course

# code: 
# ReactDOM.render(
# <h1>React Rocks!</h1>,
# document.getElementById('root')
# );

[package.json holds the list of dependencies for the application]

end lesson 4, end unit 1;

---

unit 2: intro to react

# code:
# ReactDOM.render(
# 	<h1>Hello, React</h1>
# 	document.getElementById('root')
# );

breaking down this code

html: the element is not in quotes to represent a string; html used in js. "This is called JSX, and it is a syntax extension to JavaScript. It allows us to build UI elements right in the JavaScript code!"

"React does not require using JSX, however, it is common practice in the React community to use JSX as it eases the development of user interfaces, as well as allows React to show useful error and warning messages."

# code:
# <div>
# This is
# some content
# </div>

looking at the code again.

The code:

# ReactDOM.render()
calls the render method;

when we write it as above:

# ReactDOM.render(
#	<h1>Hello, React!</h1>
#	document.getElementById('root')
# );

it passes two arguments to this method:
a JSX element and a container.

"The render method displays the provided element in the container, which, in our case, is the HTML element with id='root'."

"When you call the render method, any existing content of the container gets replaced. That is why, usually, the containers are empty in the HTML."

^^^^Seems to be really important to remember.

# code:
# ReactDOM.render(
#	<p>Some text</p>
#	document.getElementById('myText')
# );

---

# code:
# const name = "David";
# const el = <p>Hello, {name}</p>;
# 
# ReactDOM.render(
#	el,
#	document.getElementById('root')
# );

"...JSX can be used just like JavaScript expressions, You can assign a JSX expression to a variable, return it from a function, etc."

use curly brackets, {} to call variable or JSX expression.

specify attributes using quotes, like in HTML:

# code:
# <div id="name"></div>

JSX example:

# code:
# <div id={user.id}></div>

"ReactDOM uses camelCase property naming convention instead of HTML attribute names. For example, class becomes className in JSX"

well-noted ^^

# code:
# const x = "myClass";
# const el = <div className={x}></div>

end of lesson 1 of module 2.

---

lesson 2 of module 2;

"When the JSX expressions are compiled, they are converted into JavaScript objects, representing React elements.

"React then uses these elements to build the corresponding HTML DOM and display it in the browser.

"Lets create a counter app, that increments a counter variable every second and displays it on the page as a paragraph."

# code:
# let counter = 0;
#
# function show() {
#	counter++;
#	cosnt el = <p>{counter}</p>;
# 	ReactDom.render(
#		el, document.getElementById('root')
#	);
# }
#
# setInterval(show, 1000);

"We use setInterval to call the show function every second and render the counter element on the page.

"One of the great features of React is that it updates only the elements that need an update. You can inspect the HTML output of the example above and see that only the text in the paragraph gets updated every second.

"In practice, most React apps call ReactDom.render() once. We will learn how to update elements without calling the render methods in the next lessons."

# code:
# setInterval(calculate, 5000);

"Virtual DOM" ... "is a lightweight representation of the DOM"

Process:

1: change made
2: Virtual DOM upgraded, fast process, simple objects
3: React compared Virtual DOM "to its previous state and only applies the DOM updates necessary to bring the DOM to the desired state."

DOM = Document Object Model, a tree-like representation of the HTML page. (More about DOM in JavaScript Tutorial on SoloLearn.)

finishes lesson 2 in module 2;

---

begins lesson 3 of module 2;

Components

"Components let you split the page into independent and reusable parts."

parts of page = components

heading, ex of component
button, also

"This makes organizing the page leaps and bounds easier, but even more importantly, components allow us as the developer to separate concerns from one another."

"Separation of Concerns is a programming principle that states that each concern should be separated into individual pieces. For example, in the diagram above, the 'new queston' button (2) should be clicked if a user wants to add a new question, whereas the search bar (3) would be used if the user wanted to search the existing questions."

^^^^ Very much an analytical principle; perhaps with analogues in continental thinking, but often willingly or unknowingly overridden there. Worth writing about. [update, my forthcoming blogpost on PerilousResonance.wordpress.com/ 278., will be about this idea of "separation of concerns" and Barfield's "Final Participation."]

Two types of components:

-Functional Components
-Class Components

Here, Functional Components
"A functional component is a simple JavaScript function:"

# code:
# function Hello() {
#	return <h1>Hello world.</h1>;
# }

*****
"Notice that the name of the functional component begins with a capital letter. This is absolutely critical. If we start the name of a component with a lowercase letter, the browser will treat our component like a regular HTML element instead of a Component."

^^^^ seems pretty important.

# code:
# function HelloWorld() {
#	return <div>Hello, world.</div>;
# }

# code:
# const el = <Hello />;

---

# code:
# function Hello() {
# 	return <h1>Hello world.</h1>;
# }
#
# const el = <Hello />;
# ReactDOM.render(
# 	el,
#	document.getElementById('root')
# );

"Remember, all component names need to start with a capital letter."

---

# code:
# function Section() {
# 	return <div>A section</div>;
# }
#
# const el = <Section />;
# ReactDOM.render(
#	el,
#	document.getElementById('root')
# );

"Class compontents [as opposed to Function Components] are typically used when there are more advanced user interactions, like forms, and animations.
"All class components need to extend the React.Component class.
"We can rewrite our Hello functional component as a class component:"

# code:
# class Hello extends React.Component {
# 	render() {
# 		return <h1>Hello World.</h1>;
#	}
# }

"Class components need to have a render method, which is in charge of telling what the page should show.
"We will learn about the features and differences of functional and class components in the next lessons."

# code:
# class Greeting extends React.Component {
#	render() {
#		return <div>Hello World.</div>;
#	}
# }

end of lesson 3 of module 2.

---

begins lesson 4 of module 2;

Props

"Functional components can accept arguments, similar to JavaScript functions. These arguments are called props, and represent an object.
"For example, we can use props in our Hello component:"

# code:
# function Hello(props) {
#	return <p>Hell, {props.name}!</p>;
# }

---

# code:
# const el = <Hello name ="David" />;

^^^^"This attribute will be passed to the component when rendered. 

# code:
# function Test(props) {
#	return <p>{"A"+props.title}</p>;
# }
# 
# const el = <Test title="X" />;
# ReactDOM.render(
# 	el,
#	document.getElementById('root')
# );

output of preceding codeblock will be "AX"

"Components can use other components to generate an output:"

# code:
# function App() {
#	return <div>
#		<Hello name="David" />
#		<Hello name="James" />
#		<Hello name="Amy" />
#	</div>;
# }

^^^^App component uses Hello component 3 times, each time new name attribute.

"Generally, it is a good practice to split complex components into multiple smaller components, that are reusable. For example, a Post component can use an Avatar component, an Image component, a Date component, etc."

"Props can be accessed in class components using this.props."

# code:
# class Hello extends React.Component {
# 	render() {
# 		return <p>Hello, {this.props.name}!</p>;
# 	}
# }

"An important thing to remember is that props are read-only, meaning components cannot modify their props."

"Interactive apps generally need to change data and the page elements. We will learn how to change the output of components using state in the next lesson."

# code:
# class Image extends React.Component {
# 	render() {
# 		return <img src={this.props.url} />;
#	}
# }

creating a shopping list

# code:
# <Item name="Cheese" price="4.99" />
#
# function Item(props) {
# 	return <div className="item">
#	<b>Name:</b> {props.name} <br />
#	<b>Price:</b> {props.price}
#	</div>;
# }
#
# <Item name="Cheese" price="4.99" />
# <Item name="Bread" price="1.5" />
# <Item name="Ice cream" price="24" />

"We have added some simple CSS styles to separate the items visually. [the <b>?]Tap Try it on StackBlitz to see the result and play around with the code."

end of lesson 4 of module 2;

---

begins less on 5 of module 2;

State

"Up to this point, we have learned how to pass to components using props.
"Many web apps need their components to change their data, for example, aftr user interaction (clicking a button, submitting a form, etc.). However, props cannot be changed.
"In order to allow components to manage and change their data, React provides a feature called state. State is an object that is added as a property in class components."

# code:
# class Hello extends React.Component {
# 	state = {
#		name: "James"
#	}
#
# 	render() {
#		return <h1>Hello {this.state.name}.</h1>;
#	}
# }

"The state object can contain multiple key:value pairs, separated by commas."

# code:
# class Person extends React.Component {
# 	state = {
#		name: "David",
#		age: 42
#	}
# ...
# }

"State should not be modified directly. Instead, React provides a setState() method, that can be used to modify state."

# code:
# this.setState( {
#	name: "James",
#	age: 25
# });

so, "setState" is a method.

"Why should we use setState, instead of simply changing the values of the object properties directly? The answer uncovers one of the most useful features of React: when setState is called, React automatically re-renders the affected component with the new state!
"Usually, the change in state happens in event handlers. We will look at an example in the next part!"

"When state changes using the setState method, React gets informed and immediately re-renders the component with the updated state."

# code:
# this.setState({
# 	count: 42
# });

A counter app:

# code:
# class Counter extends React.Component {
#	state = {
#		counter: 0
#	}
# 	render() {
#		return <div>
#		<p>{this.state.counter}</p>
#		<button>Increment</button>
#		</div>;
#	}
# }


counter with a click event handler

# code:
# class Counter extends React.Component {
#	state = {
#		counter: 0
#	}
# 	increment = () => {
#		this.setState({
#			counter: this.state.counter+1})
#	}
#	render() {
#		return <div>
#		<p>{this.state.counter}</p>
#		<button onClick={this.increment}>Increment</button>
#		</div>;
#	}
# }

"Notice that the event handler uses camelCase syntax and that the handler function is passed in curly braces."

Main differences between props and state:
- "We use props to pass data to components
- Components use state to manage their data
- Props are read-only and cannot be modified
- State can be modified by its component using the setState() method
- The setState() method results in re-rendering the component affected."

"Components that have states are called stateful, while components that do not use state are called stateless."

# code:
# class Person extends React.Component {
# 	state = {
# 		name: this.props.name
#	}
# }

end of lesson 5 of module 2, officially halfway through (I think)

---***---
